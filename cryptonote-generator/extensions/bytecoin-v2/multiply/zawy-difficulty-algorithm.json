{
  "file": "multiply/zawy-difficulty-algorithm.json",
  "description": "Add Zawy difficulty algorithm option in multiply (https://github.com/monero-project/research-lab/issues/3)",
  "required": [
    "core/bytecoin.json",
    "zawy-difficulty-algorithm.json",
    "multiply.json",
    "get-blockchain-settings.json"
  ],
  "files": [
    {
      "path": "/src/Daemon/Daemon.cpp",
      "changes": [
        {
          "action": "add_below",
          "marker": "const command_line::arg_descriptor< std::vector<std::string> > arg_CHECKPOINT",
          "parameters": {
            "text": [
              "  const command_line::arg_descriptor<uint32_t>    arg_ZAWY_DIFFICULTY_BLOCK_INDEX  = {\"ZAWY_DIFFICULTY_BLOCK_INDEX\", \"uint32_t\", 0};",
              "  const command_line::arg_descriptor<size_t>    arg_ZAWY_DIFFICULTY_V2  = {\"ZAWY_DIFFICULTY_V2\", \"size_t\", 0};",
              "  const command_line::arg_descriptor<uint8_t>    arg_ZAWY_DIFFICULTY_BLOCK_VERSION  = {\"ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION\", \"uint8_t\", 0};"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "command_line::add_arg(desc_cmd_sett, arg_CHECKPOINT);",
          "parameters": {
            "text": [
              "    command_line::add_arg(desc_cmd_sett, arg_ZAWY_DIFFICULTY_BLOCK_INDEX);",
              "    command_line::add_arg(desc_cmd_sett, arg_ZAWY_DIFFICULTY_V2);",
              "    command_line::add_arg(desc_cmd_sett, arg_ZAWY_DIFFICULTY_BLOCK_VERSION);"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "currencyBuilder.testnet(testnet_mode);",
          "parameters": {
            "text": [
              "    currencyBuilder.zawyDifficultyBlockIndex(command_line::get_arg(vm, arg_ZAWY_DIFFICULTY_BLOCK_INDEX));",
              "    currencyBuilder.zawyDifficultyV2(command_line::get_arg(vm, arg_ZAWY_DIFFICULTY_V2));",
              "//uint8_t recognized as char",
              "    if (command_line::get_arg(vm, arg_ZAWY_DIFFICULTY_BLOCK_VERSION) == 0) {",
              "      currencyBuilder.zawyDifficultyBlockVersion(command_line::get_arg(vm, arg_ZAWY_DIFFICULTY_BLOCK_VERSION));",
              "    } else {",
              "      currencyBuilder.zawyDifficultyBlockVersion(command_line::get_arg(vm, arg_ZAWY_DIFFICULTY_BLOCK_VERSION) - '0');",
              "    }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGateService/CoinBaseConfiguration.h",
      "changes": [
        {
          "action": "add_below",
          "marker": "uint64_t MONEY_SUPPLY;",
          "parameters": {
            "text": [
              "  uint32_t ZAWY_DIFFICULTY_BLOCK_INDEX;",
              "  size_t ZAWY_DIFFICULTY_V2;",
              "  uint8_t ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION;"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGateService/CoinBaseConfiguration.cpp",
      "changes": [
        {
          "action": "add_below",
          "marker": "MONEY_SUPPLY=CryptoNote::parameters::MONEY_SUPPLY;",
          "parameters": {
            "text": [
              "    ZAWY_DIFFICULTY_BLOCK_INDEX=CryptoNote::parameters::ZAWY_DIFFICULTY_BLOCK_INDEX;",
              "    ZAWY_DIFFICULTY_V2=CryptoNote::parameters::ZAWY_DIFFICULTY_V2;",
              "    ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION=CryptoNote::parameters::ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION;"
            ]
          }
        },
        {
          "action": "add_below",
          "marker": "(\"MONEY_SUPPLY\", po::value<uint64_t>()->default_value(CryptoNote::parameters::MONEY_SUPPLY), \"uint64_t\")",
          "parameters": {
            "text": [
              "    (\"ZAWY_DIFFICULTY_BLOCK_INDEX\", po::value<uint32_t>()->default_value(0), \"uint32_t\")",
              "    (\"ZAWY_DIFFICULTY_V2\", po::value<size_t>()->default_value(0), \"size_t\")",
              "    (\"ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION\", po::value<uint8_t>()->default_value(0), \"uint8_t\")"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "if (options.count(\"EMISSION_SPEED_FACTOR\")) {",
          "parameters": {
            "text": [
              "  if (options.count(\"ZAWY_DIFFICULTY_BLOCK_INDEX\")) {",
              "    ZAWY_DIFFICULTY_BLOCK_INDEX = options[\"ZAWY_DIFFICULTY_BLOCK_INDEX\"].as<uint32_t>();",
              "  }",
              "  if (options.count(\"ZAWY_DIFFICULTY_V2\")) {",
              "    ZAWY_DIFFICULTY_V2 = options[\"ZAWY_DIFFICULTY_V2\"].as<size_t>();",
              "  }",
              "  if (options.count(\"ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION\")) {",
              "    ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION = options[\"ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION\"].as<uint8_t>();",
              "  }"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/PaymentGateService/PaymentGateService.cpp",
      "changes": [
        {
          "action": "add_below",
          "marker": "currencyBuilder.moneySupply(config.coinBaseConfig.MONEY_SUPPLY);",
          "parameters": {
            "text": [
              "  currencyBuilder.zawyDifficultyBlockIndex(config.coinBaseConfig.ZAWY_DIFFICULTY_BLOCK_INDEX);",
              "  currencyBuilder.zawyDifficultyV2(config.coinBaseConfig.ZAWY_DIFFICULTY_V2);",
              "//uint8_t recognized as char",
              "  if (config.coinBaseConfig.ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION == 0) {",
              "    currencyBuilder.zawyDifficultyBlockVersion(config.coinBaseConfig.ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION);",
              "  } else {",
              "    currencyBuilder.zawyDifficultyBlockVersion(config.coinBaseConfig.ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION - '0');",
              "  }"
            ]
          }
        }
      ]
    },

    {
      "path": "/src/Rpc/CoreRpcServerCommandsDefinitions.h",
      "description": "Changes for get-blockchain-settings.json",
      "changes": [
        {
          "action": "add_above",
          "marker": "std::string BYTECOIN_NETWORK;",
          "parameters": {
            "text": [
              "  uint32_t ZAWY_DIFFICULTY_BLOCK_INDEX;",
              "  size_t ZAWY_DIFFICULTY_V2;",
              "  uint8_t ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION;"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "KV_MEMBER(BYTECOIN_NETWORK)",
          "parameters": {
            "text": [
              "    KV_MEMBER(ZAWY_DIFFICULTY_BLOCK_INDEX)",
              "    KV_MEMBER(ZAWY_DIFFICULTY_V2)",
              "    KV_MEMBER(ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION)"
            ]
          }
        }
      ]
    },
    {
      "path": "/src/Rpc/RpcServer.cpp",
      "description": "Changes for get-blockchain-settings.json",
      "changes": [
        {
          "action": "add_above",
          "marker": "res.core.CRYPTONOTE_NAME = m_core.getCurrency().cryptonoteName();",
          "parameters": {
            "text": [
              "  if (m_core.getCurrency().zawyDifficultyV2() != 0 || m_core.getCurrency().zawyDifficultyBlockVersion() != 0 ||",
              "       m_core.getCurrency().zawyDifficultyBlockIndex() != 0 ) {",
              "    res.extensions.push_back(\"zawy-difficulty-algorithm.json\");",
              "  }"
            ]
          }
        },
        {
          "action": "add_above",
          "marker": "res.core.P2P_DEFAULT_PORT = m_p2p.get_this_peer_port();",
          "parameters": {
            "text": [
              "  res.core.ZAWY_DIFFICULTY_BLOCK_INDEX = m_core.getCurrency().zawyDifficultyBlockIndex();",
              "  res.core.ZAWY_DIFFICULTY_V2 = m_core.getCurrency().zawyDifficultyV2();",
              "  res.core.ZAWY_DIFFICULTY_DIFFICULTY_BLOCK_VERSION = m_core.getCurrency().zawyDifficultyBlockVersion();"
            ]
          }
        }
      ]
    }
  ]
}
